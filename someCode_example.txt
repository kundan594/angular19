 <img
      [src]="'assets/users/' + selectedUser.avatar"
      [alt]="selectedUser.name"
    />


    get imagePath() {
    return 'assets/users/' + this.selectedUser.avatar
  }


  <div>
  <button (click)="onSelectUser()">
    <img [src]="imagePath" [alt]="selectedUser.name" />
    <span>{{ selectedUser.name }}</span>
  </button>
</div>



with signal 

 selectedUser = signal(DUMMY_USERS[randomIndex]);
  imagePath = computed(() => 'assets/users/' + this.selectedUser().avatar)

  // get imagePath() {
  //   return 'assets/users/' + this.selectedUser.avatar
  // }

  onSelectUser() {
    const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);
    this.selectedUser.set(DUMMY_USERS[randomIndex]);
  }


  @Input() avatar!: string;
  @Input() name!: string;



  @Input({ required: true }) avatar!: string;
  @Input({ required: true }) name!: string;

  @Input() name?: string;


  @Input({ required: true }) user!: User;
  @Output() select = new EventEmitter();

  
// type User = {
//   id: string;
//   avatar: string;
//   name: string;
// }


interface User {
  id: string;
  avatar: string;
  name: string;
}

 @Input({ required: true }) user!: User;
  @Output() select = new EventEmitter();


  <main>
  <ul id="users">
    @for (user of users; track user.id) {
      <li>
        <app-user [user]="user" (select)="onSelectUser($event)" />
      </li>
    }
  </ul>

  @if (selectedUser) {
    <app-tasks [name]="selectedUser.name" />
  } @else {
    <p id="fallback">Select a user to see their tasks!</p>
  }


   get selectedUser() {
    return this.users.find((user) => user.id === this.selectedUserId);
  }

  <button [class.active]="selected" (click)="onSelectUser()">


  <div
  [class]="{
    status: true,
    'status-online': currentStatus === 'online',
    'status-offline': currentStatus === 'offline',
    'status-unknown': currentStatus === 'unknown'
  }" >




  In TypeScript, the statement:

declare var variable_name: type;

Copy

Insert

means you are telling the TypeScript compiler that a variable named variable_name exists somewhere (for example, it is provided by an external script or library), but you are not defining it in your code. You are only declaring its existence and (optionally) its type.

Why use declare var?
To let TypeScript know about global variables that are defined outside your TypeScript code (e.g., by a CDN script, legacy JS, or a browser API).
To avoid TypeScript errors about "cannot find name" for variables that are actually available at runtime.

Key Points
declare var does NOT create the variable or allocate memory for it.
It only tells TypeScript about its existence and type.
It is used for type checking and code completion, not for actual variable definition.



https://angular.dev/tools/libraries/creating-libraries 


ng new my-workspace --no-create-application
cd my-workspace
ng generate library my-lib

ng build my-lib --configuration development
ng test my-lib
ng lint my-lib



In Angular, EventType is related to the Angular Router’s navigation events. These events help you track the lifecycle of route changes. Here are all the main event types you’ll encounter:

Angular Router Event Types
NavigationStart

Fired when navigation starts.
Useful for showing loading indicators.
NavigationEnd

Fired when navigation ends successfully.
Useful for hiding loaders or tracking page views.
NavigationCancel

Fired when navigation is canceled (e.g., a guard returns false).
NavigationError

Fired when navigation fails due to an error.
RoutesRecognized

Fired when the router parses the URL and recognizes the route.
GuardsCheckStart

Fired when router starts running route guards.
GuardsCheckEnd

Fired when router finishes running route guards.
ResolveStart

Fired when router starts running route resolvers.
ResolveEnd

Fired when router finishes running route resolvers.
ChildActivationStart

Fired when a child route is about to be activated.
ChildActivationEnd

Fired when a child route has been activated.
ActivationStart

Fired when a route is about to be activated.
ActivationEnd

Fired when a route has been activated.
Example: Listening to Router Events
Summary:
These event types let you react to every stage of Angular’s navigation process, such as showing/hiding loaders, handling errors, or tracking route changes.